{"version":3,"file":"static/js/64.fbb07e02.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.js","pages/ContactsPage/ContactsPage.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState,  } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from '../ContactForm/ContactForm.module.css'\nimport { useDispatch } from \"react-redux\"; \nimport { addContact } from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { toast} from 'react-toastify';\n\nexport default function ContactForm() {\n\n  const dispatch = useDispatch();\n  \n  const contacts = useSelector(state => state.contacts.items);\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n\n  const hendleInputChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    contacts.find(\n      contact => name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? toast(`${name} is already in contacts.`) :\n      dispatch(addContact({ name, number }))\n      && toast(`Contact ${name} added successfully`)\n      && reset();\n    }\n\n    const reset = () => {\n      setName('')\n      setNumber ('')\n          \n    }\n \n  \n    const inputNameId = nanoid();\n    const inputTelId = nanoid();\n  \n\n        return (\n     <form className={css.conactForm} onSubmit={handleSubmit}>\n        <label htmlFor={inputNameId} className={css.conactFormLabel}>\n            Name\n          <input\n            className={css.conactFormItem}\n            id={inputNameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={hendleInputChange}>\n          </input>\n        </label>\n        <label htmlFor={inputTelId} className={css.conactFormLabel}>\n            Number\n          <input\n            className={css.conactFormItem}\n            id={inputTelId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={hendleInputChange}>\n          </input>\n        </label>\n            <button className={css.contactFormBtn} type=\"submit\">Add contact</button>\n            \n      </form>\n        );\n    }\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"contactListEl\":\"ContactList_contactListEl__U5HlX\",\"contactListSpan\":\"ContactList_contactListSpan__ifi1I\",\"contactListDelBtn\":\"ContactList_contactListDelBtn__QoUyJ\"};","import React from 'react';\nimport css from '../ContactList/ContactList.module.css'\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(state => state.contacts.items);\n    const filter = useSelector(state => state.filter);\n    const isLoading = useSelector(state => state.contacts.isLoading);\n   \n    const onDeleteContact = id => dispatch(deleteContact(id));\n    \n    \n  \n\n    const getFilterContacts = () => {\n        if (!filter) {\n            return contacts;\n        }\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n        \n    };\n\n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n    \n    return (\n       \n        <ul className={css.contactList}> {isLoading && <Loader />}{getFilterContacts().map(({ name, number, id }) => {\n            return (<li key={id}  className={css.contactListItem}>\n                <p className={css.contactListEl}><span className={css.contactListSpan}>Name:</span> {name}</p>\n                <p className={css.contactListEl}> <span className={css.contactListSpan}>Number:</span> {number}</p>\n                <button className={css.contactListDelBtn} onClick={() => onDeleteContact( id ) &&  toast(`Contact delete successfully`)}  type=\"button\">Remove</button>\n            </li>)\n        }\n            \n        \n        )}\n        </ul>);\n};\n        \n\n    \nexport default ContactList;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactFilterLabel\":\"ContactFilter_contactFilterLabel__48G-6\",\"contactFilterInput\":\"ContactFilter_contactFilterInput__mcngk\"};","import React from 'react';\nimport css from '../ContactFilter/ContactFilter.module.css'\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport {changeFilter } from 'redux/contacts/filterSlice'\n\nconst ContactFilter = () => {\n\n    const value = useSelector(state => state.filter);\n    const dispatch = useDispatch();\n\n    const changeFilters = e => {\n        dispatch(changeFilter(e.target.value))\n    }\n    return (\n        <label className={css.contactFilterLabel}>Find contact by name\n            <input className={css.contactFilterInput} type=\"text\" value={value} onChange={changeFilters}></input>\n        </label>\n    )\n};\n   \n\nexport default ContactFilter;\n\n","import ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport ContactFilter from \"components/ContactFilter/ContactFilter\";\n//import { ContactsContainer } from \"./ContactsPage.styled\";\n\nconst ContactsPage = () => {\n\n    return (\n        <>\n      <ContactForm ></ContactForm>\n      <h2>Contacts</h2>\n      <ContactFilter></ContactFilter>\n      <ContactList ></ContactList>\n    </>\n    )\n    \n\n}\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"conactForm\":\"ContactForm_conactForm__scXwP\",\"conactFormLabel\":\"ContactForm_conactFormLabel__d3TK0\",\"conactFormItem\":\"ContactForm_conactFormItem__ebN7J\",\"contactFormBtn\":\"ContactForm_contactFormBtn__Vy3TA\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","useState","name","setName","number","setNumber","hendleInputChange","event","currentTarget","value","reset","inputNameId","nanoid","inputTelId","className","css","onSubmit","preventDefault","find","contact","toLowerCase","toast","addContact","htmlFor","id","type","pattern","title","required","onChange","filter","isLoading","useEffect","fetchContacts","Loader","normalizedFilter","includes","getFilterContacts","map","onClick","deleteContact","onDeleteContact","e","changeFilter","target","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}