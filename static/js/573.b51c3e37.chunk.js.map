{"version":3,"file":"static/js/573.b51c3e37.chunk.js","mappings":"kQAOe,SAASA,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAGMC,EAAoB,SAAAC,GACtB,OAAQA,EAAMC,cAAcR,MACxB,IAAK,OACDC,EAAQM,EAAMC,cAAcC,OAC5B,MACJ,IAAK,QACDN,EAASI,EAAMC,cAAcC,OAC7B,MACJ,IAAK,WACDJ,EAAYE,EAAMC,cAAcC,OAChC,MACJ,QACI,OAEX,EAQKC,EAAQ,WACVT,EAAQ,IACRE,EAAS,IACTE,EAAY,GAEjB,EAEOM,GAAcC,EAAAA,EAAAA,MACdC,GAAaD,EAAAA,EAAAA,MAGnB,OACI,kBAAME,UAAWC,EAAAA,EAAAA,WAAgBC,SAnBlB,SAACT,GACpBA,EAAMU,iBAENpB,GAASqB,EAAAA,EAAAA,IAAS,CAAElB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAC7BM,GACH,EAcG,WACI,mBAAOS,QAASR,EAAaG,UAAWC,EAAAA,EAAAA,gBAAxC,kBAEI,kBACID,UAAWC,EAAAA,EAAAA,eACXK,GAAIT,EACJU,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRf,MAAOT,EACPyB,SAAUnB,QAGlB,mBAAOa,QAASN,EAAYC,UAAWC,EAAAA,EAAAA,gBAAvC,mBAEI,kBACID,UAAWC,EAAAA,EAAAA,eACXK,GAAIP,EACJQ,KAAK,QACLrB,KAAK,QACLsB,QAAQ,0CACRE,UAAQ,EACRf,MAAOP,EACPuB,SAAUnB,QAGlB,mBAAOa,QAASN,EAAYC,UAAWC,EAAAA,EAAAA,gBAAvC,sBAEI,kBACID,UAAWC,EAAAA,EAAAA,eACXK,GAAIP,EACJQ,KAAK,WACLrB,KAAK,WACLsB,QAAQ,+CACRE,UAAQ,EACRf,MAAOL,EACPqB,SAAUnB,QAGtB,mBAAQQ,UAAWC,EAAAA,EAAAA,eAAqBM,KAAK,SAA7C,wBAGH,CC3FL,IASA,EATqB,WACjB,OACI,+BACI,SAACzB,EAAD,KAIX,C,qBCRD,KAAgB,WAAa,gCAAgC,gBAAkB,qCAAqC,eAAiB,oCAAoC,eAAiB,oC,wDCAnL,IAkBIgB,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from '../ContactForm/ContactForm.module.css'\nimport { useDispatch } from \"react-redux\"; \nimport {register} from 'redux/auth/operations';;\n\n\nexport default function RegisterForm() {\n    \n    const dispatch = useDispatch();\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n\n    const hendleInputChange = event => {\n        switch (event.currentTarget.name) {\n            case 'name':\n                setName(event.currentTarget.value);\n                break;\n            case 'email':\n                setEmail(event.currentTarget.value);\n                break;\n            case 'password':\n                setPassword(event.currentTarget.value);\n                break;\n            default:\n                return;\n        }\n    }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    dispatch(register({ name, email, password }));\n        reset();\n    }\n\n    const reset = () => {\n        setName('')\n        setEmail('')\n        setPassword('')\n          \n  }\n  \n    const inputNameId = nanoid();\n    const inputTelId = nanoid();\n  \n\n    return (\n        <form className={css.conactForm} onSubmit={handleSubmit}>\n            <label htmlFor={inputNameId} className={css.conactFormLabel}>\n                Name\n                <input\n                    className={css.conactFormItem}\n                    id={inputNameId}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={hendleInputChange}>\n                </input>\n            </label>\n            <label htmlFor={inputTelId} className={css.conactFormLabel}>\n                Email\n                <input\n                    className={css.conactFormItem}\n                    id={inputTelId}\n                    type=\"email\"\n                    name=\"email\"\n                    pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n                    required\n                    value={email}\n                    onChange={hendleInputChange}>\n                </input>\n            </label>\n            <label htmlFor={inputTelId} className={css.conactFormLabel}>\n                Password\n                <input\n                    className={css.conactFormItem}\n                    id={inputTelId}\n                    type=\"password\"\n                    name=\"password\"\n                    pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$\"\n                    required\n                    value={password}\n                    onChange={hendleInputChange}>\n                </input>\n            </label>\n        <button className={css.contactFormBtn } type=\"submit\">Register</button>\n      </form>\n        );\n    }","import RegisterForm from '../../components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n    return (\n        <>\n            <RegisterForm />\n        </>\n\n    ) \n};\n\nexport default RegisterPage;","// extracted by mini-css-extract-plugin\nexport default {\"conactForm\":\"ContactForm_conactForm__scXwP\",\"conactFormLabel\":\"ContactForm_conactFormLabel__d3TK0\",\"conactFormItem\":\"ContactForm_conactFormItem__ebN7J\",\"contactFormBtn\":\"ContactForm_contactFormBtn__Vy3TA\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","hendleInputChange","event","currentTarget","value","reset","inputNameId","nanoid","inputTelId","className","css","onSubmit","preventDefault","register","htmlFor","id","type","pattern","title","required","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}