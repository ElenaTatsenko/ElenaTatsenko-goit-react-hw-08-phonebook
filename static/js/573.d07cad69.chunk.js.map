{"version":3,"file":"static/js/573.d07cad69.chunk.js","mappings":"4LAEaA,E,OAASC,EAAAA,OAAH,4Y,oICANC,EAAOD,EAAAA,EAAAA,KAAH,mGAKJE,EAAQF,EAAAA,EAAAA,MAAH,8CAGLG,EAAQH,EAAAA,EAAAA,MAAH,2L,sJCHH,SAASI,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAGMC,EAAoB,SAAAC,GACtB,OAAQA,EAAMC,cAAcR,MACxB,IAAK,OACDC,EAAQM,EAAMC,cAAcC,OAC5B,MACJ,IAAK,QACDN,EAASI,EAAMC,cAAcC,OAC7B,MACJ,IAAK,WACDJ,EAAYE,EAAMC,cAAcC,OAChC,MACJ,QACI,OAEX,EAQKC,EAAQ,WACVT,EAAQ,IACRE,EAAS,IACTE,EAAY,GAEjB,EAEOM,GAAcC,EAAAA,EAAAA,MACdC,GAAkBD,EAAAA,EAAAA,MAClBE,GAAeF,EAAAA,EAAAA,MAGrB,OACI,UAAC,KAAD,CAAMG,SApBS,SAACR,GACpBA,EAAMS,iBAENnB,GAASoB,EAAAA,EAAAA,IAAS,CAAEjB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAC7BM,GACH,EAeG,WACI,UAAC,KAAD,mBAEI,SAAC,KAAD,CACIQ,GAAIP,EACJQ,KAAK,OACLnB,KAAK,OACDoB,MAAM,yIACVC,UAAQ,EACRZ,MAAOT,EACPsB,SAAUhB,QAGlB,UAAC,KAAD,oBAEI,SAAC,KAAD,CACIY,GAAIJ,EACJK,KAAK,QACLnB,KAAK,QAELqB,UAAQ,EACRZ,MAAOP,EACPoB,SAAUhB,QAGlB,UAAC,KAAD,uBAEI,SAAC,KAAD,CACIY,GAAIL,EACJM,KAAK,WACLnB,KAAK,WAELqB,UAAQ,EACRZ,MAAOL,EACPkB,SAAUhB,QAGtB,SAAC,IAAD,CAASa,KAAK,SAAd,wBAGH,CCxFL,IASA,EATqB,WACjB,OACI,+BACI,SAACvB,EAAD,KAIX,C,wDCRM,IAkBIgB,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Btn.styled.jsx","components/Form.styled.jsx","components/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  display: block;\n  font-size: 18px;\n  width: 200px;\n  height: 40px;\n  border-radius: 6px;\n  background: linear-gradient(#302f32, #91e6f7e9, #302f32);\n  text-transform: uppercase;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: auto;\n  &:hover,\n  &:focus {\n    background: linear-gradient(#302f32, #b319d9e9, #302f32);\n    transform: scale(1.2);\n  }\n`\n ","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n    text-align: center;\n    padding-top: 10px;\n    margin-bottom: 30px;\n`\nexport const Label = styled.label`\n    font-size: 20px;\n`\nexport const Input = styled.input`\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 20px;\n    width: 200px;\n    height: 30px;\n    border-radius: 6px;\n   \n`\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from \"react-redux\"; \nimport {register} from 'redux/auth/operations';\nimport { Form, Input, Label } from 'components/Form.styled';\nimport { Button } from 'Btn.styled';\n\nexport default function RegisterForm() {\n    \n    const dispatch = useDispatch();\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n\n    const hendleInputChange = event => {\n        switch (event.currentTarget.name) {\n            case 'name':\n                setName(event.currentTarget.value);\n                break;\n            case 'email':\n                setEmail(event.currentTarget.value);\n                break;\n            case 'password':\n                setPassword(event.currentTarget.value);\n                break;\n            default:\n                return;\n        }\n    }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    dispatch(register({ name, email, password }));\n        reset();\n    }\n\n    const reset = () => {\n        setName('')\n        setEmail('')\n        setPassword('')\n          \n  }\n  \n    const inputNameId = nanoid();\n    const inputPasswordId = nanoid();\n    const inputEmailId = nanoid();\n  \n\n    return (\n        <Form onSubmit={handleSubmit} >\n            <Label >\n                Name\n                <Input\n                    id={inputNameId}\n                    type=\"text\"\n                    name=\"name\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={hendleInputChange}>\n                </Input>\n            </Label>\n            <Label >\n                Email\n                <Input\n                    id={inputEmailId}\n                    type=\"email\"\n                    name=\"email\"\n                    \n                    required\n                    value={email}\n                    onChange={hendleInputChange}>\n                </Input>\n            </Label>\n            <Label>\n                Password\n                <Input\n                    id={inputPasswordId}\n                    type=\"password\"\n                    name=\"password\"\n                    \n                    required\n                    value={password}\n                    onChange={hendleInputChange}>\n                </Input>\n            </Label>\n        <Button  type=\"submit\">Register</Button>\n      </Form>\n        );\n    }","import RegisterForm from '../../components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n    return (\n        <>\n            <RegisterForm />\n        </>\n\n    ) \n};\n\nexport default RegisterPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","styled","Form","Label","Input","RegisterForm","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","hendleInputChange","event","currentTarget","value","reset","inputNameId","nanoid","inputPasswordId","inputEmailId","onSubmit","preventDefault","register","id","type","title","required","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}