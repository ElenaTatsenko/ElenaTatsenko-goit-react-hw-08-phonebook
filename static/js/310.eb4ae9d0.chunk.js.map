{"version":3,"file":"static/js/310.eb4ae9d0.chunk.js","mappings":"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","sources":["Btn.styled.jsx","components/Form.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.js","pages/ContactsPage/ContactsPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  display: block;\n  font-size: 18px;\n  width: 200px;\n  height: 40px;\n  border-radius: 6px;\n  background: linear-gradient(#302f32, #91e6f7e9, #302f32);\n  text-transform: uppercase;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: auto;\n  &:hover,\n  &:focus {\n    background: linear-gradient(#302f32, #b319d9e9, #302f32);\n    transform: scale(1.2);\n  }\n`\n ","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n    text-align: center;\n    padding-top: 10px;\n    margin-bottom: 30px;\n`\nexport const Label = styled.label`\n    font-size: 20px;\n`\nexport const Input = styled.input`\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 20px;\n    width: 200px;\n    height: 30px;\n    border-radius: 6px;\n   \n`\n","export const selectFilter = state => state.filter;\n\nexport const selectContactItems = state => state.contacts.items;\n\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\n","import React, { useState,  } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from \"react-redux\"; \nimport { addContact } from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Form, Input, Label } from 'components/Form.styled';\nimport { selectContactItems } from 'redux/contacts/selectors';\nimport { Button } from 'Btn.styled';\n\nexport default function ContactForm() {\n\n  const dispatch = useDispatch();\n  \n  const contacts = useSelector(selectContactItems);\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n\n  const hendleInputChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    contacts.find(\n      contact => name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? toast(`${name} is already in contacts.`) :\n      dispatch(addContact({ name, number }))\n      && toast(`Contact ${name} added successfully`)\n      && reset();\n    }\n\n    const reset = () => {\n      setName('')\n      setNumber ('')\n          \n    }\n \n  \n    const inputNameId = nanoid();\n    const inputTelId = nanoid();\n  \n\n        return (\n     <Form onSubmit={handleSubmit}>\n        <Label htmlFor={inputNameId} >\n            Name\n          <Input\n            id={inputNameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={hendleInputChange}>\n          </Input>\n        </Label>\n        <Label htmlFor={inputTelId}>\n            Number\n          <Input\n            id={inputTelId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={hendleInputChange}>\n          </Input>\n        </Label>\n            <Button variant=\"text\" type=\"submit\" >Add contact</Button>\n            \n      </Form>\n        );\n    }\n\n\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-wrap: wrap;`\n    \nexport const ListItem = styled.li`\n    width: 300px;\n    text-align: center;\n    margin-bottom: 15px;\n    background: linear-gradient(#302f32, #89b423e9, #302f32);\n    padding: 15px;\n    border-radius: 6px;\n    &:hover {\n        transform: scale(1.02);\n}`\nexport const ListEl = styled.p`\n    margin-bottom: 10px;\n    font-size: 20px;\n`\n\nexport const ListSpan = styled.span`\n    font-weight: bolder;\n    font-size: 20px;\n    margin-right: 10px;\n`\nexport const ListItemBtn = styled.button`\n    font-size: 15px;\n    width: 160px;\n    height: 30px;\n    border-radius: 6px;\n    background: linear-gradient(#302f32, #91e6f7e9, #302f32);\n    text-transform: uppercase;\n     &:hover {\n        background: linear-gradient(#302f32, #b319d9e9, #302f32);\n        transform: scale(1.2);\n}\n`\n    \n\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { List, ListItem, ListEl, ListSpan, ListItemBtn } from './ContactList.styled';\nimport { selectContactItems, selectFilter, selectContactsIsLoading } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContactItems);\n    const filter = useSelector(selectFilter);\n    const isLoading = useSelector(selectContactsIsLoading);\n   \n    const onDeleteContact = id => dispatch(deleteContact(id));\n    \n    \n  \n\n    const getFilterContacts = () => {\n        if (!filter) {\n            return contacts;\n        }\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n        \n    };\n\n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n    \n    return (\n       \n        <List> {isLoading && <Loader />}{getFilterContacts().map(({ name, number, id }) => {\n            return (<ListItem key={id}  >\n                <ListEl><ListSpan>Name:</ListSpan> {name}</ListEl>\n                <ListEl> <ListSpan>Number:</ListSpan> {number}</ListEl>\n                <ListItemBtn onClick={() => onDeleteContact( id ) &&  toast(`Contact delete successfully`)}  type=\"button\">Remove</ListItemBtn>\n            </ListItem>)\n        }\n            \n        \n        )}\n        </List>);\n};\n        \n\n    \nexport default ContactList;\n\n","import styled from \"@emotion/styled\";\n\nexport const FilretContainer = styled.div`\n    margin-bottom: 25px;\n`\n\nexport const FilterLabel = styled.label`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    padding: 10px;`\n\nexport const FilterInput = styled.input`\n    width: 200px;\n    height: 30px;\n    margin-left: 10px;\n    border-radius: 6px;`\n   \n\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport { changeFilter } from 'redux/contacts/filterSlice'\nimport { FilterLabel, FilterInput, FilretContainer } from './ContactFilter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst ContactFilter = () => {\n\n    const value = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const changeFilters = e => {\n        dispatch(changeFilter(e.target.value))\n    }\n    return (\n        <FilretContainer>\n            <FilterLabel>Find contact by name\n                <FilterInput type=\"text\" value={value} onChange={changeFilters}></FilterInput>\n            </FilterLabel>\n        </FilretContainer>\n    )\n};\n   \n\nexport default ContactFilter;\n\n","import ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport ContactFilter from \"components/ContactFilter/ContactFilter\";\n//import { ContactsContainer } from \"./ContactsPage.styled\";\n\nconst ContactsPage = () => {\n\n    return (\n        <>\n      <ContactForm ></ContactForm>\n      <h2>Contacts</h2>\n      <ContactFilter></ContactFilter>\n      <ContactList ></ContactList>\n    </>\n    )\n    \n\n}\n\nexport default ContactsPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","styled","Form","Label","Input","selectFilter","state","filter","selectContactItems","contacts","items","selectContactsIsLoading","isLoading","ContactForm","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","hendleInputChange","event","currentTarget","value","reset","inputNameId","nanoid","inputTelId","onSubmit","preventDefault","find","contact","toLowerCase","toast","addContact","htmlFor","id","type","pattern","title","required","onChange","variant","List","ListItem","ListEl","ListSpan","ListItemBtn","useEffect","fetchContacts","Loader","normalizedFilter","includes","getFilterContacts","map","onClick","deleteContact","onDeleteContact","FilretContainer","FilterLabel","FilterInput","e","changeFilter","target","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}